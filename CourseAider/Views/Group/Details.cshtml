@model CourseAider.Models.Group

@{
    ViewBag.Title = "Details";
}

<section class="ca-bg1">
    @using (Html.BeginContainer())
    {
        using (Html.BeginRow())
        {
            using (Html.BeginColumn(12))
            {
                <h1>@Html.DisplayFor(model => model.Name)</h1>
                <p>
                    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
                    @Html.ActionLink("Back to List", "Index")
                </p>
            }
        }
    }
</section>
<section class="ca-bg1">
    @using (Html.BeginContainer())
    {
        using (Html.BeginRow())
        {
            using (Html.BeginColumn(5))
            {
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec pretium enim at fringilla tempor. Vestibulum pulvinar in lorem faucibus placerat. Nulla placerat ultrices felis, vitae dignissim turpis convallis posuere. In libero velit, condimentum nec mi id, posuere porta libero. Aenean vestibulum finibus mi.</p>
                <h2>Tweets about @Model.Name</h2>
                <a class="twitter-timeline" href="https://twitter.com/hashtag/analysis" data-widget-id="@Model.TwitterAccount">#analysis Tweets</a>
                <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
            }
            using (Html.BeginColumn(7))
            {
                <div class="well ca-chat">
                    <div id="discussion" class="ca-chat-window">

                    </div>
                </div>
                <nav class="navbar navbar-default">
                    <div class="container-fluid">
                    <!-- Collect the nav links, forms, and other content for toggling -->
                    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                        <div class="navbar-form navbar-left" role="search">
                            <div class="form-group">
                                <input type="text" id="message" class="form-control" placeholder="Message">
                            </div>
                            <button type="button" id="sendmessage" class="btn btn-default">Submit</button>
                        </div>
                        <ul class="nav navbar-nav navbar-right">
                        <li><a id="powerlevel">OP</a></li>
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Dropdown <span class="caret"></span></a>
                            <ul class="dropdown-menu" role="menu">
                            <li><a href="#">Action</a></li>
                            <li><a href="#">Another action</a></li>
                            <li><a href="#">Something else here</a></li>
                            <li class="divider"></li>
                            <li><a href="#">Separated link</a></li>
                            </ul>
                        </li>
                        </ul>
                    </div><!-- /.navbar-collapse -->
                    </div><!-- /.container-fluid -->
                </nav>
        
                <div class="well well-sm ca-user-list ">
                    <h4>Online:</h4>
                    <p id="user-list">
                       Loading user data..
                    </p>
                </div>
            }
        }
    }
</section>

<section class="ca-bg4">
    @using (Html.BeginContainer())
    {
        using (Html.BeginRow())
        {
            using (Html.BeginColumn(12))
            {
                <h2>Group Files</h2>
                <table class="table table-striped table-bordered table-condensed" style="background:white">
                    <thead>
                        <tr>
                            <th>
                                File Name
                            </th>
                            <th>
                                Uploader
                            </th>
                            <th>
                                Visibility
                            </th>
                            <th>

                            </th>
                        </tr>
                    </thead>
                    <tbody id="files-list">
                        @Html.Action("ListFiles", new { id = Model.Id })
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="4">
                                @Html.Action("UploadFile", new { id = Model.Id })
                            </td>
                        </tr>
                    </tfoot>
                </table>
            }
        }
    }
</section>

<!-- Button trigger modal -->
@*
        <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
            Launch demo modal
        </button>


    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Modal title</h4>
                </div>
                <div class="modal-body">
                    ...
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>
*@
@section scripts {
    
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-1.1.4.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>

       
        $(function () {
            var numberOfRecivedMessages = 0;
            function hideAllMenus(){
                $('.contextMenuPlugin').remove()
            }
            var chatOptionsMenu = {
                title: 'My Popup Menu',
                items: [
                  {label:'Mute',     icon:'/images/Mute.png', action:function(e) { 
                      
                      var userName = $(e.target).attr('data-username');
                      
                      toggleVoice(userName);
                      hideAllMenus() } 
                  },
                  {label:'Ban', icon:'/images/user_ban.png',    action:function(e) { 
                      var userName = $(e.target).attr('data-username');
                      toggleBan(userName);
                      hideAllMenus() 
                  } },
                  {label:'Kick', icon:'/images/footprint.png',    action:function(e) {
                      var userName = $(e.target).attr('data-username');
                      kick(userName);
                      hideAllMenus() 
                  } },
                  null, /* null can be used to add a separator to the menu items */
                  {label:'Close Menu',     icon:'/images/close.png',  action:function() { hideAllMenus() } },
            ]}

            var isTeacher = @(ViewBag.isTeacher.ToString().ToLower());
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message, type) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            chat.client.notify = function (text) {
                $('#discussion').append('<div class="text-info"> SERVER : ' + htmlEncode(text) + '</div>');
            }
            chat.client.error = function (errorMessage) {
                $('#discussion').append('<div class="text-error"> SERVER : ' + htmlEncode(errorMessage) + '</div>');
            }
            chat.client.message = function (sender, message) {
                var senderEscaped =  htmlEncode(sender);
                $('#discussion').append('<div class="text-success"><b class="text-warning adminChatControl" data-username=' + senderEscaped  + ' id= '+  senderEscaped + '_' + numberOfRecivedMessages + '>' + senderEscaped + " : </b>" + htmlEncode(message) + '</div>');
                $('#'+senderEscaped + '_' + numberOfRecivedMessages++).contextPopup(chatOptionsMenu);
            }
            chat.client.listUpdate = function (list){
                $('#user-list').html("");
                var users = list.split(',');
                for(var i = 0 ; i < users.length; i++){
                    var userInTheChat = '<span class="adminChatControl" data-username=' + users[i] + ' id='+ users[i] +  '>'+users[i]+'</span>'
                                        
                    $('#user-list').append(userInTheChat);
                    
                    $('#' + users[i]).contextPopup(chatOptionsMenu);
                }
            }
            // Set initial focus to message input box.
            $('#message').focus();

            // Start the connection.
            $.connection.hub.start().done(function () {
                setInterval(function(){
                    chat.server.list();
                },5000);
                chat.server.connect("@Model.IRCChannel");
                    $('#sendmessage').click(function (e) {
                        if ($('#message').val() == '') return;
                        // Call the Send method on the hub.
                        chat.server.send($('#message').val());
                        // Clear text box and reset focus for next comment.
                        $('#discussion').append('<div class="text-success"><b class="text-info"><i>You : </i></b>' + htmlEncode($('#message').val()) + '</div>');
                        $('#message').val('').focus();
                        e.preventDefault();
                    });
                    $('#message').keydown(function (e) {
                        if (e.keyCode == 13) { //ENTER
                            if ($('#message').val() == '') return;
                            chat.server.send($('#message').val());
                            $('#discussion').append('<div class="text-success"><b class="text-info"><i>You : </i></b>' + htmlEncode($('#message').val()) + '</div>');
                            $('#message').val('').focus();
                            e.preventDefault();
                        }
                    });
                    $('#powerlevel').click(function (e) {
                        becomeOP();
                    });
            });
        });

        function toggleChatInSilentMode()
        {
            var message = "Silent mode setting changed to {0}."
            toggleMode("m",message,"");//m means Moderated, only OP can speak and voiced people
        }

        function toggleVoice(user)
        {
            var message = "User " + user + "has voice has been set to {0}.";
            toggleMode("v",message,user);//v means Voice, he is now in the voiced group
        }

        function toggleBan(user)
        {
            var message = "User " + user +"has been banned.";
            toggleMode("b",message,user);
            kick(user);
        }

        function kick(user)
        {
            var chat = $.connection.chatHub;
            chat.server.kick(user);
        }
        function becomeOP()
        {
            var chat = $.connection.chatHub;
            chat.server.becomeOperator();
        }
        function toggleMode(mode,message,target)
        {
            var chat = $.connection.chatHub;
            chat.server.toggleMode(mode,message,target);
        }
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
    
}
